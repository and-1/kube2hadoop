apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"

sourceCompatibility = 1.8

buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
    //classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.1"
    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
  }
}

apply plugin: 'io.codearte.nexus-staging'

def hadoopVersion = "2.10.2"

ext.deps = [
  hadoop: [
    "common": "org.apache.hadoop:hadoop-common:${hadoopVersion}",
    "common_test": "org.apache.hadoop:hadoop-common:${hadoopVersion}:tests",
    "hdfs": "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}",
    "hdfs_test": "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}:tests"
  ],
  external: [
    "jetty-server": "org.eclipse.jetty:jetty-server:9.3.8.v20160314",
    "jetty-servlet": "org.eclipse.jetty:jetty-servlet:9.3.8.v20160314",
    "jetty-webapp": "org.eclipse.jetty:jetty-webapp:9.3.8.v20160314",
    "guava": "com.google.guava:guava:11.0.2",
    "k8sclient": "io.kubernetes:client-java:4.0.0",
    "junit": "junit:junit:4.12",
    "mockito": "org.mockito:mockito-core:2.23.0",
    "testng": "org.testng:testng:6.4",
    "jackson": "com.fasterxml.jackson.core:jackson-core:2.9.9",
    "jsonPatch": "com.github.evanphx:json-patch:0.0.0-5858425f7550",
    "zap": "org.uber.go:zap:1.8.0",
    "clientgo": "io.k8s:client-go:0.0.0-78d2af792bab",
    "prometheus": "com.github.prometheus:client_golang:1.1.0.1",
    "procfs": "com.github.prometheus:procfs:0.0.4",
    "go-logging": "com.github.op:go-logging:1.0.0",
    "testify": "com.github.stretchr:testify:1.3.0",
    "krb-codec": "org.apache.directory.server:apacheds-kerberos-codec:2.0.0.AM26"
  ]
]

allprojects {
  group = "com.linkedin.kube2hadoop"
  project.version = "0.0.1"
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  classifier = 'javadoc'
}

subprojects {
  apply plugin: "license"
  apply plugin: "java"
  apply plugin: "checkstyle"
  apply plugin: "findbugs"
  apply plugin: "eclipse"
  apply plugin: "idea"
  //apply plugin: "maven-publish"
  //apply plugin: "signing"

  apply from: "$rootDir/gradle/version-info.gradle"

  if (project.name.equals("tony-cli")) {
    apply plugin: 'com.github.johnrengelman.shadow'
    shadowJar {
      mergeServiceFiles()
      dependencies {
        exclude(dependency('org.apache.hadoop:'))
      }
      zip64 true
    }

    build.dependsOn(shadowJar)
  }

  repositories {
    mavenCentral()
  }
  plugins.withType(JavaPlugin) {
    sourceCompatibility = 1.8
    dependencies {
      testCompile deps.external.testng
    }

    test {
      useTestNG()
    }
  }

  license {
    header rootProject.file('license_header')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders = true
    excludes(
      ["**/*.properties", "**/*.xml", "**/*.yaml", "**/*.Dockerfile"]
    )
  }

  checkstyle {
    configDir rootProject.file('ligradle/checkstyle')
    configFile rootProject.file(new File(configDir.path, 'linkedin-checkstyle.xml'))
    maxWarnings 0
  }

  tasks.withType(FindBugs) {
    reports {
      xml.enabled false
      html.enabled true
    }

    classpath = classpath.filter {
      !it.name.endsWith('.pom')
    }

    excludeFilter = rootProject.file('ligradle/findbugs/findbugsExclude.xml')
  }
}

